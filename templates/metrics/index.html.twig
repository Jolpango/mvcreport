{% extends "base.html.twig" %}
{% block title %}Report{% endblock %}
{% block content %}
{% apply markdown_to_html %}
Metrics
========

Introduktion
----------------------
Det fyra C:na står för Coverage, Complexity, Cohesion och Coupling.

### Coverage
Coverage handlar om hur koden täcks utav tester. Det mäts hur många linjer kod täcks, hur många funktioner, klasser etc.
Om mna har hög coverage kan det betyda att koden är väl testad. Men det är ingen garanti, det går ju att skriva dåliga tester som täcker mycket kod. Men det kan vara en bra indikation.

### Complexity
Ju högre värde, desto mer komplex är koden. Om den är mycket komplex så kan det innebära att koden blir jobbigare och mer tidskrävande att underhålla och vidareutveckla.

### Cohesion
Cohesion handlar om hur metoder hör till sina klasser. Har man lägre värde så betyder det att man har hög cohesion, vilket innebär att metoden och klassen är skrivet för ett ansvarsområde och att metoden verkligen bör tillhöra klassen. Har man ett högt värde så innebär det att klassen har många ansvarsområden som kanske bör delas upp i flera klasser.

### Coupling
Coupling beskriver hur klasser används av andra klasser. Det finns två värden inom detta område. Ett som beskriver hur klassen används av andra klasser och ett som beskriver hur denna klassen använder andra klassen. Inkommande och utgående kopplingar.

### Exempel
<img width=30% src={{asset("assets/maintainability_metrics_before.png")}}>
I bilden ovan ser vi en "karta" över mina klasser och dess komplexitet. Den stora röda är min CardGame klass och har ett Cyclomatic Complexity värde på 23. Om man jämför detta med mitt medelvärde 4.28 så kan vi se att denna klassen är flera gånger mer komplex än alla andra.

<img width=100% src={{asset("assets/code_coverage.png")}}>
Här är ett exempel på min kodtäckning av App\Cards namespacet. Täcker nästan alla funktioner, klasser och rader. Med tanke på att CardGame är den mest komplexa klassen, så var den också svårare att testa. Testerna må täcka det mesta där, men dom är inte lika bra som testerna i mina andra klasser.

<img width=100% src={{asset("assets/cohesion.png")}}>
Här ser vi en lista över mina klassers LCOM(Lack of Cohesion Methods) värden. Det är ett sätt att mäta antalet ansvarsområden som en klass har. Helst vill man ju ha ett ansvar per klass, så det värdet vi helst vill ha är 1. Om man bortser från dom autogenererade klasserna så har 5st klasser ett värde på 2 och 7 klasser har 1.

<img width=100% src={{asset("assets/coupling.png")}}>
Här är en lista på mina klasser om hur dom har kopplingar. Min klass CardGame har 1 AC och 5 EC. Om man går efter det som står skrivet i github:
<img width=100% src={{asset("assets/coupling_def.png")}}>
Så betyder det att CardGame använder sig av en klass och blir använd av 5 klasser. Om inte jag har missuppfattat vad det innebär att använda en klass så stämmer inte den definitionen. För min GameClass används i en klass, "CardGameController" och själva CardGame använder flera klasser som t.ex TwigDeck, TwigPlayer och PointSystem. Så antingen är mätvärdena fel, min uppfattning fel, eller så är den definitionen fel.

PHPMetrics
----------------------
<img width=30% src={{asset("assets/maintainability_metrics_before.png")}}>
Den stora röda cirkeln är CardGame. Den har högre komplexitet än dom andra klasserna. Det är den längsta klassen jag har. Tycker personligen inte den är särskilt komplex i själva funktionaliteten. Men om jag skulle försöka hitta något sätt att förenkla den så hade det nog varit att dela upp koden lite mer. Ett alternativ är att flytta ut bankens logik till en egen klass.
<img width=100% src={{asset("assets/complexity_metrics.png")}}>
Tycker att alla mina klasser har bra komplexitet. Förutom CardGame som är lite på den höga sidan, speciellt om man tänker relativt till dom andra klasserna.


För att få ner komplexitet/maintainability kommer jag att dela upp CardGame klassen i totalt 3 klasser. En ny State klass(Kanske fler, en generell State, och en specifik för CardGame), en Bank klass för att utföra alla bankens uträkningar. Det är väl tekniskt sett 2 förbättringar, så jag kommer också att försöka få ner raderna kod utan att förstöra läsbarheten.

Scrutinizer
----------------------

<img width=100% src={{asset("assets/scrutinizer_first.png")}}>
Fick bra resultat i Scrutinizer från början. Det enda som dom har klagat på där har varit små fixar. Exempelvis:
<img width=100% src={{asset("assets/scrut_issues1.png")}}>
<img width=100% src={{asset("assets/scrut_issues2.png")}}>
Allt det där är enkelt att fixa och tar inte mer än 5 minuter. Den mesta komplexa klassen enligt Scrutinizer är återigen CardGame. Komplexiteten där tror jag kommer från storleken(320 rader). Så återigen tror jag att det jag kan fixa här är att bryta ut logiken för cpu och dess beslut. Kan även skapa en klass för att hålla reda på vilket state spelet är i.
<img width=100% src={{asset("assets/scrut_grades.png")}}>
Såhär ser beygen ut för alla klasser. Dom klasserna som jag har skapat och som inte är kontrollers har hög täckning och bra betyg. Så jag har svårt att se andra förändringar jag kan göra. Om jag däremot gör förändringar i andra delar så kan ju det leda till att jag behöver fler tester.
<img width=100% src={{asset("assets/scrut_function.png")}}>
Det här är den mest komplexa funktionen enligt Scrutinizer, även sämst CRAP score. Det enda funktionen gör är en switch case på en sträng, beroende på vad som är i strängen så anropar den en utav 5 olika funktioner som har hand om varsin state av spelet. Kan korta ner funktionen med minst 2 rader om jag gör returns i min switch/case.

Om jag delar upp min CardGame klass i 3 delar tror jag att jag kommer att få lägre komplexitet, storlek såklart, bättre cohesion scores och också högre maintainability.
Jag kommer att göra en State klass, en Bank klass och göra alla Best Practice förbättringar som scrutinizer ger förslag på. Så målet blir att få 10.0 i score(Om vi räknar bort App\Kernel). Kommer får sämre test coverage, men i teorin så kommer det att bli lättare att skriva tester för dom nya klasserna om man vill.

Förbättringar
----------------------
### Bryta ut funktionalitet från CardGame
Jag kommer att skapa två nya klasser. En State klass och en Bank klass.
State klassen kommer att ta över all hantering av statet spelet är i, den kommer innehålla funktioner som avancerar statet, sätta statet etc.
Bank Klassen kommer att innehålla en player/eller ärva av player. Kommer att lägga till funktionerna shouldCpuDraw och processCPU som för tillfället finns i CardGame.

### Best Practice/Bug fix
Jag kommer att följa alla Scrutinizers råd och fixa alla småsaker som dom klagade på.

### Scrutinizer resultat

Efter att jag utfört allt jag sa att jag skulle göra så har jag nu fått 10.0 i Scrutinizer och inga issues från min egen kod(förutom en..). Alla operationer har ett A, inklusive processRequest som hade B innan. Komplexiteten har gått från 42 ner till 33, så inte helt perfekt men en bra bit på väg. Har också såklart tittat så att man fortfarande kan spela spelet, samt att alla tester fortfarange går igenom.

[![Scrutinizer Code Quality](https://scrutinizer-ci.com/g/Jolpango/mvcreport/badges/quality-score.png?b=main)](https://scrutinizer-ci.com/g/Jolpango/mvcreport/?branch=main)
[![Code Coverage](https://scrutinizer-ci.com/g/Jolpango/mvcreport/badges/coverage.png?b=main)](https://scrutinizer-ci.com/g/Jolpango/mvcreport/?branch=main)
[![Build Status](https://scrutinizer-ci.com/g/Jolpango/mvcreport/badges/build.png?b=main)](https://scrutinizer-ci.com/g/Jolpango/mvcreport/build-status/main)
[![Code Intelligence Status](https://scrutinizer-ci.com/g/Jolpango/mvcreport/badges/code-intelligence.svg?b=main)](https://scrutinizer-ci.com/code-intelligence)

### PHPMetrics resultat
Efter att jag gjort min förbättringar så ser jag att CardGame fortfarande är stor och röd. Men maintainability har gått upp med 6, komplexiteten har gått från 23 till 18. Det har gjort att hela min kods komplexitet har gått ner till 3.81(0.47 mindre). Det mesta har blivit bättre och mer underhållbart. Medelvärde för antal buggar har gått ner, dock är det nog inte för att dom tror jag har mindre buggar, utan att jag har fler klasser och dom nya jag la till har väldigt lågt värde.
<img width=30% src={{asset("assets/maintain_after.png")}}>
<img width=100% src={{asset("assets/complexity_metrics_after.png")}}>

LCOM har gått upp med 0.01 för den tycker att CardGameState inte är värd att ha en 1a. Troligtvis pågrund utav att jag la till funcktionaliteten som håller koll på vilken renderpath som ska användas.
<img width=100% src={{asset("assets/lcom_after.png")}}>

Diskussion
----------------------
Det har varit kul och lite jobbigt att jobba med kodkvalitet på detta sättet. 
Fördelarna med att jobba såhär är att man tvingas att tänka på ett sätt som kan hjälp en att skriva kod av högre kvalitet. Hade absolut varit enklare ifall vi hade börjat med att använda dessa verktyg. Men man får ganska tydlig vägledning om hur man ska ta sig an problemen man har skapat.
Det kostar ganska mycket tid att jobba såhär och jag tror det är lätt att istället för att jobba på funktionalitet och ta sitt projekt vidare så fastnar man på småsaker för man är lite av en perfektionist och har svårigheter att nöja sig med det man gjort.

Tycker Scrutinizer har varit bra att jobba med, det är väldigt tydligt och super nice att när man pushar sin kod så körs alla tester och liknande automatiskt. Blir ett trevligt workflow. Var dock ett j*vla h*lvete att få igång testerna så att jag fick en coverage badge. Har nog 50 pushar med olika config filer. Efter det så flöt det på bra.


{% endapply %}
{% endblock %}
