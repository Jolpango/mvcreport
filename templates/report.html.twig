{% extends "base.html.twig" %}
{% block title %}Report{% endblock %}
{% block content %}
{% apply markdown_to_html %}
Rapporter
========

Kursmoment 1
------------
Jag har sedan tidigare pluggat lite på spelprogrammering och gjort en del spel. Där har jag i princip alltid använt mig utav objektorienterad programmering. Känner mig mer bekväm med den typen av programmering än funktionsbaserat.

PHPs sätt att skriva objektorienterat påminner mig ganska mycket om c språken. Både i syntax och vad det finns för möjligheter med arv. Det är inte så mycket man behöver förstå för att skapa sina första klasser. Kan vara bra att veta vad en klass är och syntaxen för just PHP. En klass är en ritning och ett objekt är en "fysisk version" utifrån sin ritning. En klass innehåller medlemsvariabler och funktioner/metoder. Dessa kan man göra både privata och publika, kort sagt nås privata saker endast inuti klassen själv medans publika kan kallas på från andra ställen. Generellt sätt så vill du inte påverka medlemsvariabler direkt från andra klasser, detta sker oftast genom getter och setter funktioner för att t.ex kontrollera värden eller liknande. Vill du ta emot värden för att initiera dina objekt kan du använda dig av klassens konstruktor. Det är den som kallas på när du anropar new Klassnamn(). 

Kodbasen vi använder påminner mycket om express och flask som vi jobbat med i tidigare kurser. En skillnad här är att vi inte har skrivit något för att starta upp server och koppla ihop routes eller liknande. Vi bara lägger dom i rätt mapp med rätt klass och annotations på route funktionerna och så magiskt vet servern om vad den ska serva.

PHP the right way: Stort dokument. Intressant att det finns en simpel inbyggd webserver. Tycker det är intressant med templates och hade gärna lärt mig mer om det samt hur man skriver dom mer generaliserade och återanvändbara.

TIL: Att det finns en inbyggd liten server i php.

Kursmoment 2
------------
Arv - Det är när en klass ärver från en annan. Med detta menas att allt som föräldern är, blir också barnet. Barnet har tillgång till allt som är protected och uppåt.
Komposition - Komposition är när en klass har en relation med en annan klass. En klass har ägandeskap över den andra.
interface - En Implementaitonslös template. Beskriver vilka funktioner som finns och det är "subklassernas" uppgift att implementera dom.
trait - Trait är som lösa kodmoduler som klasser kan "ärva" eller ha. Det är lite som att klistra in funktionalitet/variabler. Något jag skulle ha använt i mina kontrollers för att få dom att dela SessionsFunktionerna som jag skrev i båda kontrollerna.

Jag skapade två Deckklasser och två kortklasser. En för att representera det generiska beteendet och en för att lägga på extra funktionalitet som jag använder mig utav i twig/css. Jag skapade lite funktioner för att enkelt ladda in och spara till session. I alla routes så laddar jag in föregående, gör mina operationer i routen och sedan sparar jag ner det igen. Deck klassen skickar med en array som twig kan använda för att rendera. Det jag skulle gjort bättre är att flytta den lilla logiken jag har till en model klass som hanterar all logik.

Jag gjorde inte flödeschemat för denna veckan, stog att man skulle göra det i kmom03 så svarar på den frågan då.

TIL: Att man inte kan ärva från flera klasser samtidigt i php.

Kursmoment 3
------------
Fråga från kmom02: Berätta hur det kändes att modellera ett kortspel med flödesdiagram och psuedokod. Var det något som du tror stödjer dig i din problemlösning och tankearbete för att strukturera koden kring en applikation?
Det gick bra. Är inte särskilt förtjust i att skriva pseudokod när det handlar om enkla eller abstrakta problem. Tycker det gör mer nytta om man pratar om lite mer komplicerade algoritmer eller liknande. Har programmerat en del spel innan så jag är ganska van vid att kunna strukturera och spel/separera koden på ett relativt logiskt sätt. Använde mig mycket utav kontrollers och liknande för att hantera olika skärmar i spel, och det passade utmärkt att applicera den kunskapen här.

Jag är ganska nöjd med min implementation. Jag tycker att jag fick till ett väldigt bra interface mot gameklassen. Detta gjorde att kontroller klassen blev väldigt simpel men också ganska dynamiskt med tanke på hur jag enkelt kan ändra hur gameklassen fungerar och sedan ändra responsen. Skulle kanske kunna bryta ner Gameklassen i ytterliggare lite småproblem ifall man skulle vilja göra det lite mer avancerat.
När en användare klickar på någon knapp som jag förser dom med så kommer man skickas till post sidan. Där återskapar jag mitt gameobjekt från sessionen. Det blev enkelt att spara ner hela klassobjekt i sessionen efter jag kollat upp hur serializeinterfacet funkar. När jag har fått tag på mitt gameobjekt igen så anropar jag funktionen game.processRequest(), vilket tar emot ett requestobjekt. Väl inne i funktionen så kollar jag så att min variabel "type" finns med och sedan switchcase på den. type variabeln ska innehålla ett av fem olika strängar. Beroende på vilken det är så kommer funktionen att avancera spelet på olika sätt. Det finns också safeguards för att se till så att man inte kan göra en request i fel state av spelet. processRequest funktionen returnerar en array av strängar. Det blir lite som en chatt/logg över vad som händer under spelets gång, väl tillbaka i kontrollerklassen så lägger jag till alla meddelandeden som flashes. Detta gör det enkelt för mig att visa upp för spelaren vad som faktiskt sker.

Tycker symfony verkar som ett bra ramverk. Kanske inte det bästa för att göra spel i via post/gets. Tycker om den här typen av routing och sätta upp servrar. Tror nog dock att jag föredrar express över detta, mycket med tanke på att jag tycker mer om javascript samt den templatemotorn vi använde där. Twig tycker jag är bra, men lite "stel".

TIL: Att Serializable är ett trevligt interface att implementera, gjorde det mycket enkelt för mig att spara ner mitt objekt.

Kursmoment 4
------------

Kursmoment 5
------------

Kursmoment 6
------------

Kursmoment 7-10
------------
{% endapply %}
{% endblock %}
